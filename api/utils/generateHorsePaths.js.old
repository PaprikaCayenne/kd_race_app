// File: api/utils/generateHorsePaths.ts
// Version: v0.3.1 â€“ Preserve Catmull-Rom logic with dynamic speed model placeholder for realism

import { catmullRomSpline } from './splineUtils';
import { generateOffsetLane } from './generateOffsetLane';

interface Point {
  x: number;
  y: number;
}

interface Bounds {
  x: number;
  y: number;
  width: number;
  height: number;
}

interface HorsePathsResult {
  horsePaths: Record<string, Point[]>;
  trackMeta: object;
}

/**
 * Generate Catmull-Rom smoothed paths for horses with offset spacing.
 * Applies future-ready metadata support for speed changes and realism tweaks.
 *
 * @param innerBounds Track dimensions
 * @param cornerRadius Corner rounding for base centerline
 * @param horseCount Number of horses
 * @param laneWidth Pixels between lanes
 * @returns {HorsePathsResult}
 */
export function generateHorsePaths(
  innerBounds: Bounds,
  cornerRadius: number,
  horseCount: number,
  laneWidth: number = 30
): HorsePathsResult {
  const segments = 400;

  // Generate raw elliptical centerline
  const basePoints: Point[] = [];
  const cx = innerBounds.x + innerBounds.width / 2;
  const cy = innerBounds.y + innerBounds.height / 2;
  const r = Math.min(innerBounds.width, innerBounds.height) / 2 - laneWidth;

  for (let i = 0; i < segments; i++) {
    const t = (i / segments) * Math.PI * 2;
    const x = cx + r * Math.cos(t);
    const y = cy + r * Math.sin(t);
    basePoints.push({ x, y });
  }

  // Smooth path
  const centerline = catmullRomSpline(basePoints, 8);

  const horsePaths: Record<string, Point[]> = {};
  for (let i = 0; i < horseCount; i++) {
    const horseId = `horse-${i + 1}`;
    const offset = (i - (horseCount - 1) / 2) * laneWidth;
    const lane = generateOffsetLane(centerline, offset);
    horsePaths[horseId] = lane;
  }

  const trackMeta = {
    centerline,
    horseCount,
    laneWidth,
    bounds: innerBounds,
    cornerRadius,
    segments,
  };

  return { horsePaths, trackMeta };
}
