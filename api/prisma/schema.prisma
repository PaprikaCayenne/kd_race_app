// File: prisma/schema.prisma
// Version: v0.5.0 â€” Adds user currency, betting model, and race lock support

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String
  nickname      String?
  deviceId      String          @unique
  currency      Int             @default(100) // ðŸª™ Lease Coins
  createdAt     DateTime        @default(now())
  registrations Registration[]
  bets          Bet[]

  @@map("users")
}

model Horse {
  id            Int             @id @default(autoincrement())
  name          String
  color         String
  variant       String          @default("bay")
  registrations Registration[]
  results       Result[]
  replayFrames  ReplayFrame[]
  horsePaths    HorsePath[]
  bets          Bet[]

  @@map("horses")
}

model Registration {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  horse      Horse    @relation(fields: [horseId], references: [id])
  horseId    Int
  createdAt  DateTime @default(now())

  @@map("registrations")
}

model Race {
  id         BigInt        @id @default(autoincrement()) @db.BigInt
  startedAt  DateTime?
  endedAt    DateTime?
  locked     Boolean       @default(false) // ðŸ”’ Prevent new bets when locked
  results    Result[]
  replay     ReplayFrame[]
  horsePaths HorsePath[]
  trackMeta  TrackMeta?
  bets       Bet[]

  @@map("races")
}

model Result {
  id       Int     @id @default(autoincrement())
  raceId   BigInt  @db.BigInt
  horseId  Int
  position Int
  timeMs   Int

  horse    Horse   @relation(fields: [horseId], references: [id])
  race     Race    @relation(fields: [raceId], references: [id])

  @@map("results")
}

model ReplayFrame {
  id        Int     @id @default(autoincrement())
  raceId    BigInt  @db.BigInt
  horseId   Int
  pct       Float
  timeMs    Int

  race      Race    @relation(fields: [raceId], references: [id])
  horse     Horse   @relation(fields: [horseId], references: [id])

  @@map("replay_frames")
}

model HorsePath {
  id      Int     @id @default(autoincrement())
  raceId  BigInt  @db.BigInt
  horseId Int
  index   Int
  x       Float
  y       Float

  race    Race    @relation(fields: [raceId], references: [id])
  horse   Horse   @relation(fields: [horseId], references: [id])

  @@map("horse_paths")
}

model TrackMeta {
  id           Int     @id @default(autoincrement())
  raceId       BigInt  @unique @db.BigInt
  centerline   Json
  horseCount   Int
  laneWidth    Int
  bounds       Json
  cornerRadius Int

  race         Race    @relation(fields: [raceId], references: [id])

  @@map("track_meta")
}

model Bet {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  race      Race     @relation(fields: [raceId], references: [id])
  raceId    BigInt
  horse     Horse    @relation(fields: [horseId], references: [id])
  horseId   Int
  amount    Int
  createdAt DateTime @default(now())

  @@unique([userId, raceId]) // ðŸ§  One bet per user per race
  @@map("bets")
}
