generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String
  nickname      String?
  deviceId      String          @unique
  leaseLoons    Int             @default(1000) // ðŸª™ Lease Loons
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  registrations Registration[]
  bets          Bet[]

  @@map("users")
}

model Horse {
  id            Int             @id @default(autoincrement())
  name          String
  bodyColor     String
  bodyHex       String
  saddleColor   String
  saddleHex     String          @unique
  registrations Registration[]
  results       Result[]
  replayFrames  ReplayFrame[]
  horsePaths    HorsePath[]
  bets          Bet[]

  @@map("horses")
}

model Registration {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  horse      Horse    @relation(fields: [horseId], references: [id])
  horseId    Int
  race       Race     @relation(fields: [raceId], references: [id])
  raceId     BigInt   @db.BigInt
  createdAt  DateTime @default(now())

  @@map("registrations")
}

model Race {
  id           BigInt        @id @default(autoincrement()) @db.BigInt
  name         String        @unique
  type         String        @default("heat")
  isFinal      Boolean       @default(false)
  isTest       Boolean       @default(false)
  generatedAt  DateTime      @default(now())
  startedAt    DateTime?
  endedAt      DateTime?
  betsLocked   Boolean       @default(false)
  betClosesAt  DateTime?

  registrations Registration[]
  results        Result[]
  replay         ReplayFrame[]
  horsePaths     HorsePath[]
  trackMeta      TrackMeta?
  bets           Bet[]

  @@map("races")
}

model RaceName {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  used     Boolean  @default(false)
  usedAt   DateTime?

  @@map("race_names")
}

model Result {
  id       Int     @id @default(autoincrement())
  raceId   BigInt  @db.BigInt
  horseId  Int
  localId  Int
  position Int
  timeMs   Int

  horse    Horse   @relation(fields: [horseId], references: [id])
  race     Race    @relation(fields: [raceId], references: [id])

  @@map("results")
}

model ReplayFrame {
  id        Int     @id @default(autoincrement())
  raceId    BigInt  @db.BigInt
  horseId   Int
  pct       Float
  timeMs    Int

  race      Race    @relation(fields: [raceId], references: [id])
  horse     Horse   @relation(fields: [horseId], references: [id])

  @@map("replay_frames")
}

model HorsePath {
  id      Int     @id @default(autoincrement())
  raceId  BigInt  @db.BigInt
  horseId Int
  index   Int
  x       Float
  y       Float

  race    Race    @relation(fields: [raceId], references: [id])
  horse   Horse   @relation(fields: [horseId], references: [id])

  @@map("horse_paths")
}

model TrackMeta {
  id           Int     @id @default(autoincrement())
  raceId       BigInt  @unique @db.BigInt
  centerline   Json
  horseCount   Int
  laneWidth    Int
  bounds       Json
  cornerRadius Int

  race         Race    @relation(fields: [raceId], references: [id])

  @@map("track_meta")
}

model Bet {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  race      Race     @relation(fields: [raceId], references: [id])
  raceId    BigInt
  horse     Horse    @relation(fields: [horseId], references: [id])
  horseId   Int
  amount    Int
  createdAt DateTime @default(now())

  @@unique([userId, raceId, horseId])
  @@map("bets")
}
