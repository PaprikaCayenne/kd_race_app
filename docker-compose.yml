services:
  # üê¥ Node.js API service ‚Äì handles race logic, user registration, and DB access
  kd_api:
    build:
      context: ./api                               # Build from the ./api directory
      args:
        NODE_ENV: development                      # Build-time environment variable
    container_name: kd_api
    working_dir: /usr/src/app                      # App root directory inside the container
    command: sh -c "npx prisma generate && npm run dev"  # Generate Prisma client + run dev server
    volumes:
      - ./api:/usr/src/app                         # Mount local API source
      - kd_api_node_modules:/usr/src/app/node_modules  # Isolate node_modules from host
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://derby_admin:${DB_PASS}@192.168.50.209:5432/derby  # PostgreSQL connection
      - API_ADMIN_PASS=${API_ADMIN_PASS}           # Admin secret for triggering races
    ports:
      - "4000:4000"                                # REST + WebSocket API
      - "5555:5555"                                # Optional: Prisma Studio
    restart: unless-stopped
    networks:
      - kd_net

  # ‚öôÔ∏è Frontend builder ‚Äì compiles Vite app and copies static files to /output
  kd_frontend_builder:
    image: node:20                                 # Use official Node 20 image for modern builds
    container_name: kd_frontend_builder
    working_dir: /usr/src/app                      # Builder's internal working directory
    volumes:
      - ./frontend:/usr/src/app                    # Mount Vite app source (readable)
      - /websites/kd_race_app:/output              # Output directory for built static files
      - node_modules_build_cache:/usr/src/app/node_modules  # ‚úÖ Internal volume to avoid permission issues
    command: bash -c "npm install && npm run build && cp -r dist/* /output"  # Build and copy
    restart: on-failure                            # Auto-retry if build fails
    networks:
      - kd_net

  # üåê Nginx ‚Äì serves the built frontend and proxies API/WebSocket calls
  kd_nginx:
    build:
      context: ./nginx                             # Build from custom nginx Dockerfile and config
    container_name: kd_nginx
    depends_on:
      - kd_api                                     # Ensure API is available before starting Nginx
    ports:
      - "8086:80"                                  # Public port for app access (Cloudflare/NPM)
    volumes:
      - /websites/kd_race_app:/usr/share/nginx/html:ro  # Serve built frontend files
      - ./nginx/kd.conf:/etc/nginx/conf.d/default.conf:ro  # Proxy API and WebSocket routes
    restart: unless-stopped
    networks:
      - kd_net

# üîå Internal Docker network for service-to-service communication
networks:
  kd_net:
    name: kd_net
    driver: bridge

# üì¶ Volumes
volumes:
  kd_api_node_modules:       # Isolated volume for API node_modules
  node_modules_build_cache:  # Temporary build volume for frontend node_modules (no host pollution)
