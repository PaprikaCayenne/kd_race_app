services:
  # üê¥ Node.js API service for the race backend
  kd_api:
    build:
      context: ./api                          # Build from the ./api folder using its Dockerfile
      args:
        NODE_ENV: development                 # Set the build-time environment variable to development
    container_name: kd_api                    # Name the container as kd_api
    working_dir: /usr/src/app                 # Set working directory inside the container
    volumes:
      - kd_api_src:/usr/src/app               # Volume mount for the app source code (isolated)
      - kd_api_node_modules:/usr/src/app/node_modules  # Volume mount for node_modules (isolated to avoid host issues)
    command: npm run dev                       # Run the development server (npm start equivalent)
    environment:
      - NODE_ENV=development                  # Set the NODE_ENV environment variable for the backend
      - DATABASE_URL=postgres://derby_admin:${DB_PASS}@192.168.50.209:5432/derby  # Database connection string (use ${DB_PASS} for password)
      - API_ADMIN_PASS=${API_ADMIN_PASS}      # Admin password for starting races (set via environment)
    ports:
      - "4000:4000"                            # Expose port 4000 to the host for API access
    restart: unless-stopped                   # Restart the container unless stopped manually
    networks:
      - kd_net                                 # Connect to the shared internal Docker network

  # üß± Frontend build container (only runs with `--profile build` for the build process)
  kd_frontend_builder:
    image: node:20                             # Use official Node.js image (version 20)
    container_name: kd_frontend_builder        # Name the container as kd_frontend_builder
    working_dir: /usr/src/app                  # Set working directory for frontend inside the container
    volumes:
      - ./frontend:/usr/src/app                # Mount the local frontend source code into the container
      - /websites/kd_race_app:/output          # Mount output directory to copy build files from container
    command: bash -c "npm install && npm run build && cp -r build/* /output"  # Install dependencies, build the frontend, and copy build files to output
    restart: on-failure                        # Restart on failure (for example, if build fails)
    networks:
      - kd_net                                 # Connect to the shared internal Docker network

  # üåê Nginx container to serve frontend and reverse-proxy API/WebSocket
  kd_nginx:
    build:
      context: ./nginx  # Build from the ./nginx folder which contains the Dockerfile
    container_name: kd_nginx
    depends_on:
      - kd_api
    ports:
      - "8086:80"
    volumes:
      - /websites/kd_race_app:/usr/share/nginx/html:ro
      - ./nginx/kd.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    networks:
      - kd_net

# üîå Internal network for app services (ensure all services can communicate)
networks:
  kd_net:
    name: kd_net
    external: false                            # Docker will create the network if it doesn't exist
    driver: bridge                             # Use the bridge driver for internal communication between containers

# üß± Named volumes to isolate runtime content (node_modules and app source)
volumes:
  kd_api_src:                                  # Volume for the backend app source
  kd_api_node_modules:                         # Volume for the backend node_modules (isolated from host system)
