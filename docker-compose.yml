services:
  # üê¥ Node.js API service for the race backend
  kd_api:
    build:
      context: ./api                            # Build using Dockerfile in ./api
      args:
        NODE_ENV: development                   # Pass environment mode to Docker build
    container_name: kd_api
    working_dir: /usr/src/app                   # Set working directory inside container
    command: sh -c "npx prisma generate && npm run dev"  # Generate Prisma client and run dev server
    volumes:
      - ./api:/usr/src/app                      # Mount API source code (live code + Prisma schema)
      - kd_api_node_modules:/usr/src/app/node_modules  # Separate node_modules to avoid host conflicts
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://derby_admin:${DB_PASS}@192.168.50.209:5432/derby  # Connect to external Postgres
      - API_ADMIN_PASS=${API_ADMIN_PASS}        # Secret to authorize /api/admin/start
    ports:
      - "4000:4000"                             # Expose backend port for API and WebSocket
    restart: unless-stopped                     # Auto-restart unless manually stopped
    networks:
      - kd_net                                  # Join the shared internal app network

  # üé® Frontend (Vite + React 18 + TailwindCSS + PixiJS)
  kd_frontend:
    build:
      context: ./frontend                       # Build using Dockerfile in ./frontend
    container_name: kd_frontend
    working_dir: /app
    volumes:
      - ./frontend:/app                         # Mount Vite frontend source code
    command: npm run dev                        # Start Vite dev server with hot reload
    ports:
      - "5173:5173"                             # Expose frontend at http://localhost:5173 (or 192.168.50.212:5173 for LAN)
    depends_on:
      - kd_api                                  # Wait for backend to be ready (if needed)
    restart: unless-stopped
    networks:
      - kd_net

  # üåê Nginx web server to serve production frontend and proxy API/WebSocket
  kd_nginx:
    build:
      context: ./nginx                          # Use Dockerfile in ./nginx
    container_name: kd_nginx
    depends_on:
      - kd_api                                  # Wait for backend to be available
    ports:
      - "8086:80"                               # Expose Nginx at http://localhost:8086 (production static site)
    volumes:
      - /websites/kd_race_app:/usr/share/nginx/html:ro  # Serve production React app from /output
      - ./nginx/kd.conf:/etc/nginx/conf.d/default.conf:ro  # Custom config for proxying API + WebSocket
    restart: unless-stopped
    networks:
      - kd_net

# üîå Shared internal Docker network for container-to-container communication
networks:
  kd_net:
    name: kd_net                                # Explicit name for clarity and reuse
    driver: bridge

# üì¶ Named volumes to isolate node_modules and avoid permission issues
volumes:
  kd_api_node_modules:                          # Used for backend node_modules only
